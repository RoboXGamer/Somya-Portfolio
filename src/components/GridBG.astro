---
const {
  isMasked = false,
  isTranslated = false,
  columnCount = 20,
  strokeWidth = 0.02,
} = Astro.props;

// Calculate cell size based on columnCount
const viewBoxWidth = 16;
const viewBoxHeight = 9;
const cellWidth = viewBoxWidth / columnCount; // Width of each square cell
const cellHeight = cellWidth; // Since cells are square

// Generate vertical lines
let verticalLines = "";
for (let i = 0; i <= columnCount; i++) {
  const x = i * cellWidth;
  verticalLines += `M${x} 0 L${x} ${viewBoxHeight} `;
}

// Generate horizontal lines
// Calculate how many *full* rows fit based on cell height
const numRows = Math.floor(viewBoxHeight / cellHeight);
let horizontalLines = "";
for (let i = 0; i <= numRows; i++) {
  const y = i * cellHeight;
  horizontalLines += `M0 ${y} L${viewBoxWidth} ${y} `;
}
// Add the very last line at the bottom of the viewBox, even if it's not a full cell height
if (numRows * cellHeight < viewBoxHeight) {
  horizontalLines += `M0 ${viewBoxHeight} L${viewBoxWidth} ${viewBoxHeight} `;
}

const gridPathD = `${verticalLines} ${horizontalLines}`;
---

<svg
  width="100%"
  height="100%"
  viewBox="0 0 16 9"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <defs>
    <radialGradient
      id="radialGradient"
      cx="0.5"
      cy="0.5"
      r="0.5"
      fx="0.5"
      fy="0.5"
    >
      <stop offset="0%" stop-color="white" stop-opacity="0.5"></stop>
      <stop offset="70%" stop-color="black" stop-opacity="1"></stop>
    </radialGradient>

    <mask id="circle-mask">
      <rect width="16" height="9" fill="url(#radialGradient)"></rect>
    </mask>
  </defs>

  <g transform={isTranslated ? "translate(0 1.3)" : undefined}>
    <path
      d={gridPathD}
      opacity="0.2"
      stroke="#444"
      stroke-width={strokeWidth}
      mask={isMasked ? "url(#circle-mask)" : undefined}></path>
  </g>
</svg>
